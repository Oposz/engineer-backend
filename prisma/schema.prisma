// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String
  lastName     String
  password     String
  universities University[]
  projects     Project[]
  position     Position[]
  chats        Chat[]
  messages     Message[]
}

model University {
  id          String    @id @default(cuid())
  name        String
  description String
  photo       Upload?   @relation(fields: [uploadId], references: [id])
  users       User[]
  projects    Project[]
  leaders     Leader[]
  uploadId    String?
}

model Project {
  id                  String             @id @unique @default(cuid())
  name                String
  description         String?
  photo               Upload?            @relation(fields: [photoId], references: [id])
  photoId             String?
  favourite           Boolean
  availableSlots      Int
  signedUsers         User[]
  dueTo               DateTime?
  takenPositions      Position[]
  definedPositions    DefinedPositions[]
  leadingUniversity   University         @relation(fields: [leadingUniversityId], references: [id])
  leadingUniversityId String
  leader              Leader             @relation(fields: [leaderId], references: [id])
  leaderId            String
  sponsors            Sponsor[]
}

model Leader {
  id           String     @id @unique @default(cuid())
  name         String
  lastName     String
  title        String
  phoneNumber  String
  email        String     @unique
  role         String
  department   String
  photo        Upload?    @relation(fields: [uploadId], references: [id])
  university   University @relation(fields: [universityId], references: [id])
  universityId String
  projects     Project[]
  uploadId     String?
}

model Position {
  id                String           @id @unique @default(cuid())
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  project           Project          @relation(fields: [projectId], references: [id])
  projectId         String
  definedPosition   DefinedPositions @relation(fields: [definedPositionId], references: [id])
  definedPositionId String
}

model DefinedPositions {
  id          String     @id @default(cuid())
  name        String
  description String?
  quantity    Int
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  positions   Position[]
}

model Sponsor {
  id          String  @id @default(cuid())
  name        String
  description String?
  photo       Upload  @relation(fields: [photoId], references: [id])
  photoId     String
  project     Project @relation(fields: [projectId], references: [id])
  projectId   String
}

model Upload {
  id         String       @id @default(cuid())
  data       String
  University University[]
  Project    Project[]
  Leader     Leader[]
  Sponsor    Sponsor[]
}

model Chat {
  id        String    @id @default(cuid())
  users     User[]
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
